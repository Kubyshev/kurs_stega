import numpy as np
from PIL import Image
import qrcode


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –≤–∏–¥–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ (—á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_qr_code(data, qr_path, qr_size=(200, 200)):
    qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_L)
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white").convert('1')
    img = img.resize(qr_size)
    img.save(qr_path)


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (QR-–∫–æ–¥) –≤ —Å—Ç—Ä–æ–∫—É –±–∏—Ç–æ–≤.
def image_to_bits(image_path):
    img = Image.open(image_path)
    img = img.convert('1')  # —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    pixels = img.load()
    bits = ""
    for y in range(img.height):
        for x in range(img.width):
            # –í —Ä–µ–∂–∏–º–µ '1': 0 ‚Äì —á–µ—Ä–Ω—ã–π, 255 ‚Äì –±–µ–ª—ã–π.
            bit = '0' if pixels[x, y] == 0 else '1'
            bits += bit
    return bits, img.size  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


# –°–∫—Ä—ã–≤–∞–µ–º –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–∏–Ω–µ–º –∫–∞–Ω–∞–ª–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def hide_data_in_blue_channel(image_path, data_bits, output_image_path):
    img = Image.open(image_path)
    img = img.convert('RGB')
    pixels = img.load()

    data_len = len(data_bits)
    data_index = 0

    for y in range(img.height):
        for x in range(img.width):
            if data_index >= data_len:
                break

            r, g, b = pixels[x, y]
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω–∏–π –∫–∞–Ω–∞–ª (b)
            b = (b & 0xFE) | int(data_bits[data_index])
            data_index += 1

            pixels[x, y] = (r, g, b)
        if data_index >= data_len:
            break

    img.save(output_image_path)
    print(f"–°–∫—Ä—ã—Ç–æ {data_index} –±–∏—Ç –∏–∑ {data_len} –±–∏—Ç –≤ —Å–∏–Ω–µ–º –∫–∞–Ω–∞–ª–µ.")


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏—Ç–æ–≤ –∏–∑ —Å–∏–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_data_from_blue_channel(image_path, num_bits):
    img = Image.open(image_path)
    img = img.convert('RGB')
    pixels = img.load()

    extracted_bits = ""
    for y in range(img.height):
        for x in range(img.width):
            if len(extracted_bits) >= num_bits:
                break
            _, _, b = pixels[x, y]
            extracted_bits += str(b & 1)
        if len(extracted_bits) >= num_bits:
            break

    return extracted_bits


# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞ –∏–∑ –±–∏—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
def bits_to_image(bits, size, output_path):
    width, height = size
    img = Image.new('1', (width, height))
    pixels = img.load()

    index = 0
    for y in range(height):
        for x in range(width):
            if index < len(bits):
                pixels[x, y] = 0 if bits[index] == '0' else 255
                index += 1
            else:
                break
    img.save(output_path)




def calculate_mse(image1_path, image2_path):
    img1 = np.array(Image.open(image1_path).convert('RGB'), dtype=np.float64)
    img2 = np.array(Image.open(image2_path).convert('RGB'), dtype=np.float64)

    mse = np.mean((img1 - img2) ** 2, axis=(0, 1))  # MSE –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    return np.mean(mse)  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–æ–±—â–∏–π MSE)

def calculate_nmse(image1_path, image2_path):
    img1 = np.array(Image.open(image1_path).convert('RGB'), dtype=np.float64)
    img2 = np.array(Image.open(image2_path).convert('RGB'), dtype=np.float64)

    nmse = np.sum((img1 - img2) ** 2, axis=(0, 1)) / np.sum(img1 ** 2, axis=(0, 1))  # NMSE –ø–æ –∫–∞–Ω–∞–ª–∞–º
    return np.mean(nmse)  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–æ–±—â–∏–π NMSE)




def get_image_memory_size(file_path):
    img = Image.open(file_path)
    img_array = np.array(img)

    # –†–∞–∑–º–µ—Ä = –≤—ã—Å–æ—Ç–∞ * —à–∏—Ä–∏–Ω–∞ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (RGB = 3 –±–∞–π—Ç–∞ –Ω–∞ –ø–∏–∫—Å–µ–ª—å)
    size_in_bytes = img_array.nbytes
    #print(f"üìè –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏: {size_in_bytes} –±–∞–π—Ç")
    return size_in_bytes


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == '__main__':
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    data_for_qr = "–ö—É–±—ã—à–µ–≤–ê—Ä—Ç—ë–º"
    qr_image_path = "qr_code.bmp"
    generate_qr_code(data_for_qr, qr_image_path, qr_size=(100, 100))

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QR-–∫–æ–¥ –≤ –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    qr_bits, qr_size = image_to_bits(qr_image_path)
    print(f"QR-–∫–æ–¥ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä {qr_size} –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(qr_bits)} –±–∏—Ç")
    #print(qr_bits)

    # 2.1 Compare size qr and image.
    get_image_memory_size("qr_code.bmp")
    get_image_memory_size("B.bmp")
    if get_image_memory_size("B.bmp") > 8*get_image_memory_size("qr_code.bmp"):
        print("–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Å–∫—Ä—ã—Ç–∏—è")
    else:
        breakpoint()

    # 3. –°–∫—Ä—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É) –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–∏–Ω–µ–º –∫–∞–Ω–∞–ª–µ
    container_image = "B.bmp"  # –ø—É—Ç—å –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
    stego_image = "stego.bmp"
    hide_data_in_blue_channel(container_image, qr_bits, stego_image)

    # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    extracted_bits = extract_data_from_blue_channel(stego_image, len(qr_bits))
    #print(extracted_bits)

    # 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º QR-–∫–æ–¥ –∏–∑ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤
    recovered_qr_image = "recovered_qr.bmp"
    bits_to_image(extracted_bits, qr_size, recovered_qr_image)

    print("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:", stego_image, recovered_qr_image)

    print( "MSE:", calculate_mse(container_image, stego_image))
    print("NMSE:", calculate_nmse(container_image, stego_image))